//
//  ReviewViewModel.swift
//  Project
//
//  Created by È´òË¶ãËÅ° on 2025/08/28.
//
import SwiftUI
// MARK: - ViewModel
@MainActor
final class ReviewViewModel: ObservableObject {
    // „Çπ„Ç≥„Ç¢(Êï¥Êï∞/Â∞èÊï∞) „ÅÆÈÅ∏ÊäûËÇ¢
    let onesPlaceOptions: [Int] = Array(0...5)
    let firstDecimalOptions: [Int] = Array(0...9)

    // „É¨„Éô„É´Ë°®Á§∫
    //let levelOptions = ["üò¢","üòî","üòê","üôÇ","üòä"]
    let levelOptions = ["-","‚≠êÔ∏è1","‚≠êÔ∏è2","‚≠êÔ∏è3","‚≠êÔ∏è4","‚≠êÔ∏è5"]

    // ÂÖ•ÂäõÂÄ§(ÂÖ¨Èñã)
    @Published var whole: Int = 0
    @Published var decimal: Int = 0
    // ViewModel ÂÅ¥
    @Published var score: Double = 0.0

    @Published var tasteIndex: Int = 0
    @Published var costPerfIndex: Int = 0
    @Published var serviceIndex: Int = 0
    @Published var atmosphereIndex: Int = 0

    @Published var comment: String = ""

    // ÁîªÈù¢Áä∂ÊÖã
    @Published var isLoading: Bool = false
    @Published var errorMessage: String? = nil

    func makeScore() -> Double {
        Double(whole) + Double(decimal) / 10.0
    }

    func roundToHalf(_ v: Double) -> Double {
            (v * 2).rounded() / 2.0
    }

    // Âè£„Ç≥„ÉüÈÄÅ‰ø°
    func submit(placeName: String) async -> Bool {
        isLoading = true
        defer { isLoading = false }

        guard let url = URL(string: "/userreviewrestaurant/add") else {
            errorMessage = "URL „Åå‰∏çÊ≠£„Åß„Åô"; return false
        }
        var req = URLRequest(url: url)
        req.httpMethod = "POST"
        req.setValue("application/json", forHTTPHeaderField: "Content-Type")
        if let token = UserDefaults.standard.string(forKey: "token") {
            req.setValue("Bearer \(token)", forHTTPHeaderField: "Authorization")
        }

        let payload = ReviewAddRequest(
            place: placeName,
            score: makeScore(),
            taste: tasteIndex,
            costPerformance: costPerfIndex,
            service: serviceIndex,
            atmosphere: atmosphereIndex,
            comment: comment
        )
        do {
            req.httpBody = try JSONEncoder().encode(payload)
        } catch {
            errorMessage = "„Ç®„É≥„Ç≥„Éº„Éâ„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"; return false
        }

        do {
            let (_, resp) = try await URLSession.shared.data(for: req)
            if let http = resp as? HTTPURLResponse, http.statusCode == 401 {
                errorMessage = "„É≠„Ç∞„Ç§„É≥„Åó„Å¶„Åè„Å†„Åï„ÅÑ (401)"
                return false
            }
            guard let http = resp as? HTTPURLResponse, (200..<300).contains(http.statusCode) else {
                errorMessage = "ÈÄÅ‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü"
                return false
            }
            return true
        } catch {
            errorMessage = "ÈÄö‰ø°„Å´Â§±Êïó„Åó„Åæ„Åó„Åü: \(error.localizedDescription)"
            return false
        }
    }
    

}
